// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SportItem 申请模板配置信息
//
// swagger:model SportItem
type SportItem struct {

	// 是否开启仅自评
	Approver string `json:"approver"`

	// 创建时间
	CreateTime int64 `json:"create_time"`

	// 上传文件名称
	FileName string `json:"fileName"`

	// 文件类型
	FileType string `json:"fileType"`

	// 一级指标
	First string `json:"first"`

	// id
	// Read Only: true
	ID string `json:"id"`

	// 三级指标
	Label string `json:"label"`

	// 答案选项
	QuestionOptions []*QuestionOptions `json:"questionOptions"`

	// 二级指标，
	Second string `json:"second"`

	// 更新时间
	UpdateTime int64 `json:"update_time"`

	// 是否开启上传文件
	UploadFile string `json:"uploadFile"`
}

// Validate validates this sport item
func (m *SportItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuestionOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SportItem) validateQuestionOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.QuestionOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.QuestionOptions); i++ {
		if swag.IsZero(m.QuestionOptions[i]) { // not required
			continue
		}

		if m.QuestionOptions[i] != nil {
			if err := m.QuestionOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sport item based on the context it is used
func (m *SportItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuestionOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SportItem) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *SportItem) contextValidateQuestionOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QuestionOptions); i++ {

		if m.QuestionOptions[i] != nil {
			if err := m.QuestionOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("questionOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SportItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SportItem) UnmarshalBinary(b []byte) error {
	var res SportItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
