// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileManagerClient is the client API for FileManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileManager_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileManager_DownloadFileClient, error)
	GetClubFileZip(ctx context.Context, in *GetClubFileZipRequest, opts ...grpc.CallOption) (*GetClubFileZipReply, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileReply, error)
}

type fileManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagerClient(cc grpc.ClientConnInterface) FileManagerClient {
	return &fileManagerClient{cc}
}

func (c *fileManagerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (FileManager_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileManager_ServiceDesc.Streams[0], "/pb.FileManager/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileManagerUploadFileClient{stream}
	return x, nil
}

type FileManager_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileReply, error)
	grpc.ClientStream
}

type fileManagerUploadFileClient struct {
	grpc.ClientStream
}

func (x *fileManagerUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileManagerUploadFileClient) CloseAndRecv() (*UploadFileReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileManagerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileManager_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileManager_ServiceDesc.Streams[1], "/pb.FileManager/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileManagerDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileManager_DownloadFileClient interface {
	Recv() (*DownloadFileReply, error)
	grpc.ClientStream
}

type fileManagerDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileManagerDownloadFileClient) Recv() (*DownloadFileReply, error) {
	m := new(DownloadFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileManagerClient) GetClubFileZip(ctx context.Context, in *GetClubFileZipRequest, opts ...grpc.CallOption) (*GetClubFileZipReply, error) {
	out := new(GetClubFileZipReply)
	err := c.cc.Invoke(ctx, "/pb.FileManager/GetClubFileZip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileReply, error) {
	out := new(DeleteFileReply)
	err := c.cc.Invoke(ctx, "/pb.FileManager/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServer is the server API for FileManager service.
// All implementations must embed UnimplementedFileManagerServer
// for forward compatibility
type FileManagerServer interface {
	UploadFile(FileManager_UploadFileServer) error
	DownloadFile(*DownloadFileRequest, FileManager_DownloadFileServer) error
	GetClubFileZip(context.Context, *GetClubFileZipRequest) (*GetClubFileZipReply, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error)
	mustEmbedUnimplementedFileManagerServer()
}

// UnimplementedFileManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagerServer struct {
}

func (UnimplementedFileManagerServer) UploadFile(FileManager_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileManagerServer) DownloadFile(*DownloadFileRequest, FileManager_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileManagerServer) GetClubFileZip(context.Context, *GetClubFileZipRequest) (*GetClubFileZipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubFileZip not implemented")
}
func (UnimplementedFileManagerServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileManagerServer) mustEmbedUnimplementedFileManagerServer() {}

// UnsafeFileManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagerServer will
// result in compilation errors.
type UnsafeFileManagerServer interface {
	mustEmbedUnimplementedFileManagerServer()
}

func RegisterFileManagerServer(s grpc.ServiceRegistrar, srv FileManagerServer) {
	s.RegisterService(&FileManager_ServiceDesc, srv)
}

func _FileManager_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileManagerServer).UploadFile(&fileManagerUploadFileServer{stream})
}

type FileManager_UploadFileServer interface {
	SendAndClose(*UploadFileReply) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type fileManagerUploadFileServer struct {
	grpc.ServerStream
}

func (x *fileManagerUploadFileServer) SendAndClose(m *UploadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileManagerUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileManager_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileManagerServer).DownloadFile(m, &fileManagerDownloadFileServer{stream})
}

type FileManager_DownloadFileServer interface {
	Send(*DownloadFileReply) error
	grpc.ServerStream
}

type fileManagerDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileManagerDownloadFileServer) Send(m *DownloadFileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FileManager_GetClubFileZip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubFileZipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).GetClubFileZip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileManager/GetClubFileZip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).GetClubFileZip(ctx, req.(*GetClubFileZipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileManager/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManager_ServiceDesc is the grpc.ServiceDesc for FileManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileManager",
	HandlerType: (*FileManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClubFileZip",
			Handler:    _FileManager_GetClubFileZip_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileManager_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileManager_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileManager_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file.proto",
}
